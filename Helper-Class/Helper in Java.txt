

class HelpMe {
	/* .......................Pre_Value.............................. */
	long factorial[] = new long[500000];
	boolean isPrime[] = new boolean[500000];
	int spf[] = new int[500000];
	long M = 1000000007;

	/* .......................GCD.............................. */
	long gcd(long a, long b) {
		return b == 0 ? a : gcd(b, a % b);
	}

	long gcdA(long a[]) {
		long g = 0;
		for (int i = 0; i < a.length; i++) {
			g = gcd(g, a[i]);
		}
		return g;
	}

	/* .......................MAX/MIN.............................. */
	long min(long a, long b) {
		return Math.min(a, b);
	}

	long min(long a, long b, long c) {
		return Math.min(a, Math.min(b, c));
	}

	long min(long a[]) {
		long min = Integer.MAX_VALUE;
		for (int i = 0; i < a.length; i++)
			min = Math.min(a[i], min);
		return min;
	}

	long max(long a, long b) {
		return Math.max(a, b);
	}

	long max(long a, long b, long c) {
		return Math.max(a, Math.max(b, c));
	}

	long max(long a[]) {
		long max = Integer.MIN_VALUE;
		for (int i = 0; i < a.length; i++)
			max = Math.max(a[i], max);
		return max;
	}

	/* .......................SUM.............................. */
	long sum(long a[]) {
		long sum = 0;
		for (int i = 0; i < a.length; i++)
			sum = sum + a[i];
		return sum(a);
	}

	/* .......................Sorting.............................. */
	void sortI(int a[], int order) {
		ArrayList<Integer> arrayList = new ArrayList<>();
		for (int i = 0; i < a.length; i++)
			arrayList.add(a[i]);
		if (order == 1)
			Collections.sort(arrayList);
		else
			Collections.sort(arrayList, Collections.reverseOrder());
		for (int i = 0; i < a.length; i++)
			a[i] = arrayList.get(i);
	}

	void sortL(long a[], int order) {
		ArrayList<Long> arrayList = new ArrayList<>();
		for (int i = 0; i < a.length; i++)
			arrayList.add(a[i]);
		if (order == 1)
			Collections.sort(arrayList);
		else
			Collections.sort(arrayList, Collections.reverseOrder());
		for (int i = 0; i < a.length; i++)
			a[i] = arrayList.get(i);
	}

	void sort(Pair a[], int order) {
		Arrays.sort(a, new Comparator<Pair>() {
			@Override
			public int compare(Pair p1, Pair p2) {
				return (int) (p1.w - p2.w) * order;
			}
		});
	}

	/* .......................lower/upper bound.............................. */
	int upper(int A[], int k, int si, int ei) {
		int l = si;
		int u = ei;
		int ans = -1;
		while (l <= u) {
			int mid = (l + u) / 2;
			if (A[mid] <= k) {
				ans = mid;
				l = mid + 1;
			} else {
				u = mid - 1;
			}
		}
		return ans;
	}

	int lower(int A[], int k, int si, int ei) {
		int l = si;
		int u = ei;
		int ans = -1;
		while (l <= u) {
			int mid = (l + u) / 2;
			if (A[mid] <= k) {
				l = mid + 1;
			} else {
				ans = mid;
				u = mid - 1;
			}
		}
		return ans;
	}

	/* .......................Filling Array.............................. */
	void fill(long dp[], long x) {
		Arrays.fill(dp, x);
	}

	void fill(long dp[][], long x) {
		for (int i = 0; i < dp.length; i++)
			Arrays.fill(dp[i], x);
	}

	void fill(long dp[][][], long x) {
		for (int i = 0; i < dp.length; i++) {
			for (int j = 0; j < dp[0].length; j++) {
				Arrays.fill(dp[i][j], x);
			}
		}
	}

	void fill(long dp[][][][], long x) {
		for (int i = 0; i < dp.length; i++) {
			for (int j = 0; j < dp[0].length; j++) {
				for (int k = 0; k < dp[0][0].length; k++) {
					Arrays.fill(dp[i][j][k], x);
				}
			}
		}
	}

	/* .......................Prime.............................. */
	boolean prime(int n) {
		for (int i = 2; i * i <= n; i++) {
			if (n % i == 0)
				return false;
		}
		return true;
	}

	void sieve() {
		Arrays.fill(isPrime, true);
		for (int i = 2; i < 500000; i++) {
			if (!isPrime[i]) {
				spf[i] = i;
				continue;
			}
			for (int j = i * i; i < 500000; j = j + i) {
				isPrime[j] = false;
				spf[j] = i;
			}
		}
	}

	/*
	 * .......................Factorial/Power/Inverse/Module/Maths..................
	 * ............
	 */
	void fact() {
		factorial[0] = 1;
		for (int i = 1; i < 500000; i++)
			factorial[i] = (factorial[i - 1] % M * (long) i % M) % max(factorial);
	}

	long pow(long x, long y, long p) {
		long res = 1;
		x = x % p;
		if (x == 0)
			return 0;
		while (y > 0) {
			if ((y & 1) != 0)
				res = (res * x) % p;
			y = y >> 1;
			x = (x * x) % p;
		}
		return res;
	}

	long pow(long x, long y) {
		long res = 1;
		while (y > 0) {
			if ((y & 1) != 0)
				res = res * x;
			y = y >> 1;
			x = x * x;
		}
		return res;
	}

	long mInverse(long a, long m) {
		long m0 = m;
		long y = 0, x = 1;

		if (m == 1)
			return 0;

		while (a > 1) {
			long q = a / m;
			long t = m;
			m = a % m;
			a = t;
			t = y;
			y = x - q * y;
			x = t;
		}
		if (x < 0)
			x += m0;
		return x;
	}

	long nCrF(int n, int r, int p) {
		if (n < r)
			return 0;
		if (r == 0)
			return 1;
		return (factorial[n] * pow(factorial[r], p - 2, p) % p * pow(factorial[n - r], p - 2, p) % p) % p;
	}

}