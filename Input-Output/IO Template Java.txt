import java.io.*;
import java.util.*;
public class gotoJapan {
		public static void main(String[] args)throws java.lang.Exception {
			 InputStream inputStream = System.in;
		     OutputStream outputStream = System.out;
		     InputReader in = new InputReader(inputStream);
		     PrintWriter out = new PrintWriter(outputStream);
		     Solution solver=new Solution();
		     boolean isTest=false;
		     int tC= isTest ? Integer.parseInt(in.next()):1;
		     for(int i=1;i<=tC;i++) solver.solve(in,out,i);
		     out.close();
		}
		 
		/* .............................................................*/
		static class Solution{
			InputReader in;
			PrintWriter out;
			public void solve(InputReader in,PrintWriter out,int test) {
				this.in=in;this.out=out;
				
				
				
			}
			
			String n() {return in.next();}
	 
	        int ni() {return in.nextInt();}
	 
	        long nl() { return in.nextLong();}
	        
	        void pn(long zx) {out.println(zx);}
	 
	        void pn(String sz) {out.println(sz);}
	 
	        void pn(double dx) { out.println(dx);}
	        
	        void pn(long ar[]) {
	        	for(int i=0;i<ar.length;i++)out.print(ar[i]+" ");
	        	out.println();
	        }
	        
	        void pn(String ar[]) {
	        	for(int i=0;i<ar.length;i++)out.println(ar[i]);
	        }
			
		}
		/* ......................Just Input.............................*/
		static class InputReader {
	        private InputStream stream;
	        private byte[] buf = new byte[1024];
	        private int curChar;
	        private int numChars;
	 
	        public InputReader(InputStream stream) {
	            this.stream = stream;
	        }
	 
	        public int read() {
	            if (numChars == -1) {
	                throw new UnknownError();
	            }
	            if (curChar >= numChars) {
	                curChar = 0;
	                try {
	                    numChars = stream.read(buf);
	                } catch (IOException e) {
	                    throw new UnknownError();
	                }
	                if (numChars <= 0) {
	                    return -1;
	                }
	            }
	            return buf[curChar++];
	        }
	 
	        public int nextInt() {
	            return Integer.parseInt(next());
	        }
	 
	        public long nextLong() {
	            return Long.parseLong(next());
	        }
	 
	        public String next() {
	            int c = read();
	            while (isSpaceChar(c)) {
	                c = read();
	            }
	            StringBuffer res = new StringBuffer();
	            do {
	                res.appendCodePoint(c);
	                c = read();
	            } while (!isSpaceChar(c));
	 
	            return res.toString();
	        }
	 
	        private boolean isSpaceChar(int c) {
	            return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
	        }
	 
	    }
		/* ......................Just Input.............................*/
		
}
